from flask import Flask, render_template, redirect, url_for, request, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///attendance.db'
db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    role = db.Column(db.String(10), nullable=False)  # student or instructor

class Course(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    instructor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

class Attendance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    student_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    course_id = db.Column(db.Integer, db.ForeignKey('course.id'), nullable=False)
    date = db.Column(db.String(50), nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        role = request.form.get('role')
        user = User(username=username, password=password, role=role)
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        user = User.query.filter_by(username=username, password=password).first()
        if user:
            login_user(user)
            return redirect(url_for('dashboard'))
        else:
            flash('Login Unsuccessful. Please check username and password', 'danger')
    return render_template('login.html')

@app.route('/dashboard')
@login_required
def dashboard():
    if current_user.role == 'student':
        courses = Course.query.all()
        return render_template('student_dashboard.html', courses=courses)
    elif current_user.role == 'instructor':
        courses = Course.query.filter_by(instructor_id=current_user.id).all()
        return render_template('instructor_dashboard.html', courses=courses)
    return 'Unauthorized'

@app.route('/mark_attendance/<int:course_id>', methods=['POST'])
@login_required
def mark_attendance(course_id):
    if current_user.role == 'student':
        attendance = Attendance(student_id=current_user.id, course_id=course_id, date='today')
        db.session.add(attendance)
        db.session.commit()
        return redirect(url_for('dashboard'))
    return 'Unauthorized'

@app.route('/manage_course', methods=['GET', 'POST'])
@login_required
def manage_course():
    if current_user.role == 'instructor':
        if request.method == 'POST':
            course_name = request.form.get('course_name')
            course = Course(name=course_name, instructor_id=current_user.id)
            db.session.add(course)
            db.session.commit()
        return render_template('manage_course.html')
    return 'Unauthorized'

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register</title>
</head>
<body>
    <h2>Register</h2>
    <form method="POST">
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <select name="role">
            <option value="student">Student</option>
            <option value="instructor">Instructor</option>
        </select><br>
        <button type="submit">Register</button>
    </form>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form method="POST">
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <button type="submit">Login</button>
    </form>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Student Dashboard</title>
</head>
<body>
    <h2>Student Dashboard</h2>
    <ul>
        {% for course in courses %}
        <li>{{ course.name }} 
            <form method="POST" action="{{ url_for('mark_attendance', course_id=course.id) }}">
                <button type="submit">Mark Attendance</button>
            </form>
        </li>
        {% endfor %}
    </ul>
    <a href="{{ url_for('logout') }}">Logout</a>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Instructor Dashboard</title>
</head>
<body>
    <h2>Instructor Dashboard</h2>
    <ul>
        {% for course in courses %}
        <li>{{ course.name }}</li>
        {% endfor %}
    </ul>
    <a href="{{ url_for('manage_course') }}">Manage Courses</a>
    <a href="{{ url_for('logout') }}">Logout</a>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Manage Courses</title>
</head>
<body>
    <h2>Manage Courses</h2>
    <form method="POST">
        <input type="text" name="course_name" placeholder="Course Name" required><br>
        <button type="submit">Add Course</button>
    </form>
    <a href="{{ url_for('dashboard') }}">Back to Dashboard</a>
</body>
</html>
